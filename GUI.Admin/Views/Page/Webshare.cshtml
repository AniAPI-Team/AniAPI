@section Styles {
    <style>
        .display-6 {
            margin-bottom: 1.5rem;
        }

        .alert {
            display: none;
            font-weight: 500;
        }

        .alert.visible {
            display: block;
        }
    </style>
}

<div class="progress" style="margin-bottom:1rem;height:2px;">
    <div class="progress-bar bg-primary" role="progressbar" id="refresh-progress" style="width:100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
</div>
<div class="alert alert-danger" id="end-bandwidth" role="alert"></div>
<div class="alert alert-warning" id="near-end-bandwidth" role="alert"></div>
<div class="row">
    <div class="col-md-8">
        <div class="box p-3">
            <h6>Bandwidth usage</h6>
            <div class="d-flex align-items-center">
                <div class="progress flex-grow-1">
                    <div class="progress-bar progress-bar-striped progress-bar-animated bg-primary" role="progressbar" id="progress-bandwidth" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
                <span id="used-bandwidth" class="ms-3"></span>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="box p-3">
            <h6>Projected usage</h6>
            <span id="projected-bandwidth"></span>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-3">
        <div class="box p-3">
            <h6>Requests status</h6>
            <div class="position-relative" style="height:150px;width:100%;margin-bottom:1rem">
                <canvas id="pie-requests-status"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="box p-3">
            <h6>Requests countries</h6>
            <div class="position-relative" style="height:150px;width:100%;margin-bottom:1rem">
                <canvas id="pie-requests-countries"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="box p-3">
            <div class="position-relative" style="height:300px;width:100%;margin-bottom:1rem">
                <canvas id="chart-requests-errors"></canvas>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const _token = 'ep3JlwzLMK0ZsWglWKJVKhRuaaeNtJczBx0nuNCo';

        var _requestStatusChart, _requestCountriesChart, _requestErrorsChart;
        var _refreshTimer = 60;

        document.addEventListener('DOMContentLoaded', async () => {
            await loadProxyStats();

            pageLoaded();

            setInterval(loadProxyStats, 1000 * 60);
            setInterval(updateRefreshProgress, 100);
        });

        const loadProxyStats = async () => {
            const req = await fetch('@Url.Action("GetProxyStats", "Webshare")');
            const res = await req.json();

            if (res) {
                calcBandwidthMetrics(res);
                calcRequestsCharts(res);
                calcErrorsChart(res);
            }
        }

        const calcBandwidthMetrics = (res) => {
            const totalBandwidth = byteConverter(res.bandwidth_limit);
            const usedBandwidth = (res.bandwidth_used * 100) / res.bandwidth_limit;

            document.getElementById('used-bandwidth').innerText = `${usedBandwidth.toFixed(2)}% of ${totalBandwidth}`;
            document.getElementById('progress-bandwidth').style.width = `${usedBandwidth}%`;
            document.getElementById('progress-bandwidth').setAttribute('aria-valuenow', usedBandwidth);
            document.getElementById('progress-bandwidth').parentNode.setAttribute('title', byteConverter(res.bandwidth_used));

            const projectedBandwidth = byteConverter(res.bandwidth_projected);

            document.getElementById('projected-bandwidth').innerText = `${projectedBandwidth}`;

            const _10ToEnd = (res.bandwidth_limit * 10) / 100;
            const remaining = byteConverter(res.bandwidth_limit - res.bandwidth_projected);

            if ((res.bandwidth_limit - res.bandwidth_projected) <= _10ToEnd && (res.bandwidth_limit - res.bandwidth_projected) > 0) {
                document.getElementById('near-end-bandwidth').innerText = `You are ${remaining} away from bandwidth limit!`;
                document.getElementById('near-end-bandwidth').classList.add('visible');
            }

            if (res.bandwidth_projected > res.bandwidth_limit) {
                const exceed = byteConverter(res.bandwidth_projected - res.bandwidth_limit);

                document.getElementById('end-bandwidth').innerText = `You need ${exceed} more space!`;
                document.getElementById('end-bandwidth').classList.add('visible');
            }
        }

        const calcRequestsCharts = (res) => {
            let countriesLabels = [];
            let countriesColors = [];
            let countriesData = [];

            for (let country in res.request_countries) {
                countriesLabels.push(country);
                countriesColors.push(country.toHex());
                countriesData.push((res.request_countries[country] * 100) / res.requests_total);
            }

            const data = [
                {
                    labels: [
                        'Failed',
                        'Successful'
                    ],
                    datasets: [{
                        data: [
                            (res.requests_failed * 100) / res.requests_total,
                            (res.requests_successful * 100) / res.requests_total
                        ],
                        backgroundColor: [
                            '#F44336',
                            '#4CAF50'
                        ],
                        hoverOffset: 4
                    }]
                },
                {
                    labels: countriesLabels,
                    datasets: [{
                        data: countriesData,
                        backgroundColor: countriesColors,
                        hoverOffset: 4
                    }]
                }
            ];

            const config = [
                {
                    type: 'doughnut',
                    data: data[0],
                    options: {
                        maintainAspectRatio: false,
                        responsive: true,
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                callbacks: {
                                    label: (ctx) => {
                                        return `${ctx.label}: ${ctx.parsed.toFixed(2)}%`;
                                    }
                                }
                            }
                        }
                    }
                },
                {
                    type: 'doughnut',
                    data: data[1],
                    options: {
                        maintainAspectRatio: false,
                        responsive: true,
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                callbacks: {
                                    label: (ctx) => {
                                        return `${ctx.label}: ${ctx.parsed.toFixed(2)}%`;
                                    }
                                }
                            }
                        }
                    }
                }
            ];

            if (_requestStatusChart) {
                _requestStatusChart.destroy();
            }

            _requestStatusChart = new Chart(document.getElementById('pie-requests-status'), config[0]);

            if (_requestCountriesChart) {
                _requestCountriesChart.destroy();
            }

            _requestCountriesChart = new Chart(document.getElementById('pie-requests-countries'), config[1]);
        }

        const calcErrorsChart = (res) => {
            const labels = [
                'Invalid IP',
                'Internal backbone connect',
                'Connect refused',
                'Connect resolve failed',
                'Connect timeout'
            ];

            const data = {
                labels: labels,
                datasets: [{
                    label: 'Requests errors',
                    data: [
                        res.requests_error_reasons.client_connect_invalid_ip,
                        res.requests_error_reasons.internal_error_backbone_connect,
                        res.requests_error_reasons.target_connect_refused,
                        res.requests_error_reasons.target_connect_resolve_failed,
                        res.requests_error_reasons.target_connect_timeout
                    ],
                    backgroundColor: [
                        '#00BFA5',
                        '#1DE9B6',
                        '#00BFA5',
                        '#1DE9B6',
                        '#00BFA5'
                    ],
                    borderWidth: 0
                }]
            };

            const config = {
                type: 'bar',
                data: data,
                options: {
                    maintainAspectRatio: false,
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                },
            };

            if (_requestErrorsChart) {
                _requestErrorsChart.destroy();
            }

            _requestErrorsChart = new Chart(document.getElementById('chart-requests-errors'), config);
        }

        const updateRefreshProgress = () => {
            _refreshTimer -= .1;

            if (_refreshTimer <= 0) {
                _refreshTimer = 60;
            }

            const w = (_refreshTimer * 100) / 60;

            document.getElementById('refresh-progress').style.width = `${w}%`;
            document.getElementById('refresh-progress').setAttribute('aria-valuenow', w);
        }
    </script>
}