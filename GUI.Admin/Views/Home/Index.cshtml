@{
    Layout = null;
}

<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>AniAPI Administration Panel</title>
    <link rel='shortcut icon' type='image/x-icon' href='/img/favicon.ico' />

    <link href="~/pkg/bundle.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css">
    <style>
        #pictures {
            display: grid;
            overflow-y: hidden;
        }

        #pictures::after {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            content: '';
            background-color: rgba(255, 255, 255, .25);
        }

        #pictures .pic .img {
            width: 100%;
            height: 100%;
            background-repeat: no-repeat;
            background-position: center;
            background-size: cover;
            opacity: 1;
            transition: .3s;
        }

        #pictures .pic.loading .img {
            opacity: 0;
            transition: .3s;
        }

        #quote {
            opacity: 0;
            transition: .3s;
        }

        #quote.visible {
            opacity: 1;
        }

        .brand {
            width: 92px;
            height: auto;
        }

        @@media screen and (max-width: 840px) {
            #quote {
                display: none;
            }
        }
    </style>
</head>
<body>
    <div class="min-vw-100 min-vh-100">
        <div id="pictures" class="min-vw-100 min-vh-100"></div>
        <a href="./">
            <img src="~/img/aniapi_icon_dark.png" class="brand position-absolute top-0 start-0 mt-4 ms-4" />
        </a>
        <div class="form position-absolute bottom-0 end-0 w-100 py-3 px-3 d-flex align-items-center justify-content-between bg-white">
            <h6 class="m-0 text-major">Administration Panel</h6>
            <figure class="text-center m-0" id="quote">
                <blockquote class="blockquote m-0 text-minor" id="quote-quote"></blockquote>
                <figcaption class="blockquote-footer m-0" id="quote-anime"></figcaption>
            </figure>
            <button type="submit" class="btn btn-primary" onclick="onSubmit()">Login</button>
        </div>
    </div>

    <div class="min-vw-100 min-vh-100 d-flex align-items-center justify-content-center bg-white" id="page-loader">
        <div class="spinner-grow" style="width:3rem;height:3rem;" role="status"></div>
    </div>

    <script src="~/pkg/bundle.min.js"></script>

    <partial name="~/Views/_CookieConsent.cshtml" />

    <script>
        var _measures;

        const onLoad = async () => {
            window.addEventListener('keydown', onKeyDown);

            await loadQuote();
            await loadPictures();

            pageLoaded();
        }

        const loadPictures = async () => {
            _measures = getMeasures();

            const req = await fetch('/random_anime_pictures/' + _measures.n);
            const res = await req.json();

            const container = document.getElementById('pictures');
            container.style.gridTemplateColumns = `repeat(${_measures.x}, auto)`;
            container.style.gridTemplateRows = `repeat(${_measures.y}, auto)`;

            for (let i = 0; i < res.length; i++) {
                const pic = document.createElement('div');
                pic.className = 'pic';
                pic.style.backgroundColor = res[i][0];

                const img = document.createElement('div');
                img.className = 'img';
                img.style.backgroundImage = `url('${res[i][1]}')`;

                pic.appendChild(img);
                container.appendChild(pic);
            }

            setInterval(changePicture, 2 * 1000);
        }

        const loadQuote = async () => {
            let res;

            do {
                const req = await fetch('https://animechan.vercel.app/api/random');
                res = await req.json();
            }
            while (res.quote.length > 60);

            document.getElementById('quote-quote').innerText = res.quote;
            document.getElementById('quote-quote').title = res.quote;
            document.getElementById('quote-anime').innerHTML = `${res.character} in <cite title="Source Title">${res.anime}</cite>`;

            document.getElementById('quote').classList.add('visible');
        }

        const changePicture = async () => {
            let pictures = [];
            const p = Math.floor(_measures.n / 10) == 0 ? 1 : Math.floor(_measures.n / 10);

            do {
                const n = Math.floor(Math.random() * _measures.n);

                if (!pictures.includes(n)) {
                    pictures.push(n);
                }
            }
            while (pictures.length < p);

            const req = await fetch('/random_anime_pictures/' + p);
            const res = await req.json();

            for (let i = 0; i < pictures.length; i++) {
                const pic = document.getElementById('pictures').getElementsByClassName('pic').item(pictures[i]);

                pic.classList.add('loading');
                pic.style.backgroundColor = res[i][0];

                setTimeout(() => {
                    const img = pic.getElementsByClassName('img').item(0);

                    img.style.backgroundImage = `url('${res[i][1]}')`;

                    setTimeout(() => {
                        pic.classList.remove('loading');
                    }, 300);
                }, 300);
            }
        }

        const onSubmit = () => {
            const url = `https://api.aniapi.com/v1/oauth?response_type=code&client_id=@ViewBag.ClientId&redirect_uri=${encodeURIComponent('@ViewBag.RedirectUri')}&state=@ViewBag.State`;
            window.location.href = url;
        }

        const getMeasures = () => {
            const x = window.screen.width / 150;
            const y = window.screen.height / 150;

            const n = Math.floor(x) * Math.floor(y);

            return {
                x: Math.floor(x),
                y: Math.floor(y),
                n: n
            };
        }

        const onKeyDown = (e) => {
            if (e.keyCode === 13) {
                onSubmit();
            }
        }

        setTimeout(onLoad, 100);
    </script>
</body>
</html>